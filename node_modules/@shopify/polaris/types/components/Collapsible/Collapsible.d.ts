import React from 'react';
export interface Props {
    /** Assign a unique ID to the collapsible. For accessibility, pass this ID as the value of the triggering componentâ€™s aria-controls prop. */
    id: string;
    /** Toggle whether the collapsible is expanded or not. */
    open: boolean;
    /** The content to display inside the collapsible. */
    children?: React.ReactNode;
}
export declare type AnimationState = 'idle' | 'measuring' | 'closingStart' | 'closing' | 'openingStart' | 'opening';
export interface State {
    height?: number | null;
    animationState: AnimationState;
    open: boolean;
}
declare const ParentCollapsibleExpandingContext: React.Context<boolean>;
declare class Collapsible extends React.Component<Props, State> {
    static contextType: React.Context<boolean>;
    static getDerivedStateFromProps({ open: willOpen }: Props, { open, animationState: prevAnimationState }: State): {
        animationState: AnimationState;
        open: boolean;
    };
    context: React.ContextType<typeof ParentCollapsibleExpandingContext>;
    state: State;
    private node;
    private heightNode;
    componentDidUpdate({ open: wasOpen }: Props): void;
    render(): JSX.Element;
    private handleTransitionEnd;
}
declare const _default: React.ComponentClass<Props, any> & typeof Collapsible;
export default _default;
