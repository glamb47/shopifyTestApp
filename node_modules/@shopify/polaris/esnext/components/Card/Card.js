import React from 'react';
import { classNames } from '../../utilities/css';
import ButtonGroup from '../ButtonGroup';
import { WithinContentContext } from '../../utilities/within-content-context';
import ActionList from '../ActionList';
import Button, { buttonFrom } from '../Button';
import Popover from '../Popover';
import { withAppProvider, } from '../../utilities/with-app-provider';
import { Header, Section, Subsection } from './components';
import styles from './Card.scss';
class Card extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            secondaryFooterActionsPopoverOpen: false,
        };
        this.toggleSecondaryActionsPopover = () => {
            this.setState(({ secondaryFooterActionsPopoverOpen }) => {
                return {
                    secondaryFooterActionsPopoverOpen: !secondaryFooterActionsPopoverOpen,
                };
            });
        };
    }
    render() {
        const { children, title, subdued, sectioned, actions, primaryFooterAction, secondaryFooterActions, secondaryFooterActionsDisclosureText, polaris: { intl }, } = this.props;
        const className = classNames(styles.Card, subdued && styles.subdued);
        const headerMarkup = title || actions ? <Header actions={actions} title={title}/> : null;
        const content = sectioned ? <Section>{children}</Section> : children;
        const primaryFooterActionMarkup = primaryFooterAction
            ? buttonFrom(primaryFooterAction, { primary: true })
            : null;
        let secondaryFooterActionsMarkup = null;
        if (secondaryFooterActions && secondaryFooterActions.length) {
            if (secondaryFooterActions.length === 1) {
                secondaryFooterActionsMarkup = buttonFrom(secondaryFooterActions[0]);
            }
            else {
                secondaryFooterActionsMarkup = (<React.Fragment>
            <Popover active={this.state.secondaryFooterActionsPopoverOpen} activator={<Button disclosure onClick={this.toggleSecondaryActionsPopover}>
                  {secondaryFooterActionsDisclosureText ||
                    intl.translate('Polaris.Common.more')}
                </Button>} onClose={this.toggleSecondaryActionsPopover}>
              <ActionList items={secondaryFooterActions}/>
            </Popover>
          </React.Fragment>);
            }
        }
        const footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? (<div className={styles.Footer}>
          <ButtonGroup>
            {secondaryFooterActionsMarkup}
            {primaryFooterActionMarkup}
          </ButtonGroup>
        </div>) : null;
        return (<WithinContentContext.Provider value>
        <div className={className}>
          {headerMarkup}
          {content}
          {footerMarkup}
        </div>
      </WithinContentContext.Provider>);
    }
}
Card.Section = Section;
Card.Header = Header;
Card.Subsection = Subsection;
export default withAppProvider()(Card);
